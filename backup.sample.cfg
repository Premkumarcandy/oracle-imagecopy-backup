[generic]
# After how many days the backup logs will be deleted
logretention: 20
# Root directory for backups, backups will be placed under $backupdest/dbsectionname
backupdest: /nfs/backup
# Warning and critical levels for checking last snapshot age (in hours), warning is exit code 1 and critical is exit code 2
warningsnapage: 26
criticalsnapage: 32
# Directory where tnsnames.ora and sqlnet.ora are located
tnsadmin: tns.sample
# OS user that executes the backup
osuser: oracle
# Oracle home
oraclehome: /u01/app/oracle/product/12.1.0.2/db
# Maxlockwait in minutes
maxlockwait: 30
# Python module name and class name that implement the storage snapshot/cloning functions (extending class SnapHandler in module backupcommon)
snappermodule: zfssa
snapperclass: ZFSSA

[zfssa]
url: https://zfssa.example.com:215
pool: disk-pool1
project: db-backup1

[rman]
catalog: /@rman

[autorestore]
# The directory to be used for restore tests. Must be empty, everything under it is destroyed.
# NB! This directory WILL BE CLEANED.
autorestoredestination: /nfs/autorestore/dest
# Clone name
autorestoreclonename: autorestore
# Place to mount the clone. This MUST be already described in /etc/fstab as mountable by user (with options fg,noauto,user).
# For example:
# zfssa.example.com:/export/demo-backup/autorestore       /nfs/autorestore/mnt    nfs     rw,fg,soft,nointr,rsize=32768,wsize=32768,tcp,vers=3,timeo=600,noauto,user      0 0
autorestoremountpoint: /nfs/autorestore/mnt
# Restore will be done using the latest snapshot that is at least this many hours old
autorestoresnapage: 0
# Autorestore log files
autorestorelogdir: /nfs/autorestore/log
# Maximum difference between auto restore target date and customverifydate in hours
autorestoremaxtoleranceminutes: 5
# Autorestorecatalog connect string
# First create user manually in the database:
#    create user autorestore identified by complexpassword;
#    grant create session,create table,create sequence,create procedure,create view,create job to autorestore;
#    alter user autorestore quota unlimited on users;
# Then add it to password wallet and run ./autorestore.py configfilename --createcatalog
autorestorecatalog: /@autorestore
# Chance of doing a full database validation after restore, the larger the integer, the less likely it will be. Set to 0 to disable, set to 1 to always validate. 7 means 1/7 chance.
autorestorevalidatechance: 0
# Modulus of doing a full database validation. Validation is done if: mod(current day, autorestoremodulus) == mod(hash(database unique name), autorestoremodulus).
# This quarantees that validation for each database is done after every x days consistently. 0 means disable.
# Set either autorestorevalidatechance or autorestoremodulus to 0, they will not work concurrently, modulus if preferred.
autorestoremodulus: 30

## Databases

[cdb1]
dbid: 888398667
recoverywindow: 2
parallel: 4
snapexpirationdays: 31
snapexpirationmonths: 6
registercatalog: true
hasdataguard: false
schedulebackup: FREQ=DAILY;BYHOUR=10;BYMINUTE=0
schedulearchlog: FREQ=HOURLY;BYHOUR=21
customverifydate: select max(d) from (select cast(max(createtime) as date) d from exampleapp.transactions union all select current_dt from dbauser.autorestore_ping_timestamp)

[olddb]
dbid: 888398334
recoverywindow: 2
parallel: 4
snapexpirationdays: 14
snapexpirationmonths: 12
registercatalog: true
hasdataguard: false
schedulebackup: FREQ=DAILY;BYHOUR=5;BYMINUTE=0
schedulearchlog: FREQ=HOURLY
genericoraclehome: /u01/app/oracle/product/11.2.0.4/db
zfssapool: oldpool-0
zfssaproject: databases-11g-backup
customverifydate: select max(d) from (select cast(max(createtime) as date) d from exampleapp2.log union all select current_dt from dbauser.autorestore_ping_timestamp)
autorestorethread: 3
